apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
 name: xlabels.demo-kcl.crossplane.io
 labels:
   provider: aws
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: demo-kcl.crossplane.io/v1alpha1
    kind: XNetwork
  mode: Pipeline
  pipeline:
  - step: render-with-kcl
    functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      metadata:
        name: resource
      spec:
        target: Resources
        # OCI, Git or inline sources are supported - we'll use inline here
        # source: oci://ghcr.io/kcl-lang/crossplane-xnetwork-kcl-function
        # source: github.com/kcl-lang/modules/crossplane-xnetwork-kcl-function
        source: |
          # Get the XR spec fields which are our user input
          id = option("params")?.oxr?.spec?.id or ""
          includeGateway = option("params")?.oxr?.spec?.includeGateway or False
          count = option("params")?.oxr?.spec?.count or 1
          providerConfigName = option("params")?.oxr?.spec?.providerConfigName or "default"
          region = option("params")?.oxr?.spec.region or "eu-central-1"

          # Create number of VPCs according to spec.count
          vpcs = [{
              apiVersion = "ec2.aws.upbound.io/v1beta1"
              kind = "VPC"
              metadata.name = "vpc-{}".format(i)
              metadata.labels = {
                "networks.meta.fn.crossplane.io/network-id" = id
                "networks.meta.fn.crossplane.io/vpc-id" = "vpc-{}".format(i)
              }
              spec.forProvider = {
                  region = region
                  cidrBlock = "192.168.0.0/16"
                  enableDnsSupport = True
                  enableDnsHostnames = True
              }
              spec.providerConfigRef.name = providerConfigName
          } for i in range(count)]

          # Optionally create number of gateways according to spec.count and spec.includeGateway
          gateways = [{
              apiVersion = "ec2.aws.upbound.io/v1beta1"
              kind = "InternetGateway"
              metadata.name = "gateway-{}".format(i)
              metadata.labels = {
                "networks.meta.fn.crossplane.io/network-id" = id
              }
              spec.forProvider = {
                  region = region
                  vpcIdSelector = {
                    matchControllerRef = True
                    matchLabels = {
                      "networks.meta.fn.crossplane.io/vpc-id" = "vpc-{}".format(i)
                    }
                  }
              }
              spec.providerConfigRef.name = providerConfigName
          } for i in range(count)] if includeGateway else []

          # return any created VPCs and gateways
          items = vpcs + gateways
  - step: ready
    functionRef:
      name: function-auto-ready